Certainly! Let's create an agent that generates a short story and then converts it to speech using an audio generation model. We'll call this agent "TaleWhisperer". It will use OpenAI's GPT for text generation and the gTTS (Google Text-to-Speech) library for audio generation.
Here's the complete code:
pythonCopyimport os
from flask import Flask, request, jsonify, send_file
from dotenv import load_dotenv
import openai
from gtts import gTTS
import tempfile
import uuid

# Load environment variables
load_dotenv()

# Set up OpenAI API key
openai.api_key = os.getenv("OPENAI_API_KEY")

app = Flask(__name__)

class TaleWhispererAgent:
    def __init__(self):
        self.prompt_template = """
        You are TaleWhisperer, a creative AI storyteller. Your task is to create a short, engaging story based on the user's prompt.
        The story should be approximately 50-75 words long and have a clear beginning, middle, and end.

        User Prompt: {user_prompt}

        Story:
        """

    def generate_story(self, user_prompt):
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "You are a creative storyteller."},
                    {"role": "user", "content": self.prompt_template.format(user_prompt=user_prompt)}
                ],
                max_tokens=100,
                n=1,
                stop=None,
                temperature=0.8,
            )
            return response.choices[0].message['content'].strip()
        except Exception as e:
            return f"An error occurred: {str(e)}"

    def generate_audio(self, text):
        try:
            tts = gTTS(text=text, lang='en')
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3")
            tts.save(temp_file.name)
            return temp_file.name
        except Exception as e:
            return f"An error occurred during audio generation: {str(e)}"

tale_whisperer = TaleWhispererAgent()

@app.route('/question', methods=['POST'])
def generate_tale():
    data = request.json
    user_query = data.get('query', '')

    if not user_query:
        return jsonify({"error": "No query provided"}), 400

    story = tale_whisperer.generate_story(user_query)
    audio_file = tale_whisperer.generate_audio(story)

    if audio_file.startswith("An error occurred"):
        return jsonify({"error": audio_file}), 500

    unique_filename = f"{uuid.uuid4()}.mp3"
    os.rename(audio_file, unique_filename)

    return jsonify({
        "story": story,
        "audio_url": f"/audio/{unique_filename}"
    })

@app.route('/audio/<filename>')
def serve_audio(filename):
    return send_file(filename, mimetype="audio/mp3")

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
To use this code:

Save it as app.py.
Create a .env file in the same directory with your OpenAI API key:
CopyOPENAI_API_KEY=your_openai_api_key_here

Install the required packages:
Copypip install flask python-dotenv openai gtts

Run the application:
Copypython app.py


This will start a Flask server on port 5000. You can then send POST requests to http://localhost:5000/question with a JSON body like this:
jsonCopy{
    "query": "A magical forest adventure"
}
The server will respond with a JSON object containing the generated story and a URL to access the audio file:
jsonCopy{
    "story": "In the heart of an enchanted forest...",
    "audio_url": "/audio/some-unique-id.mp3"
}
You can then access the audio file by making a GET request to the provided audio_url.
To deploy this as a Python program:

Ensure you have Python installed on your deployment machine.
Copy the app.py and .env files to your deployment location.
Install the required packages as mentioned above.
Run the application using python app.py.

For production deployment:

Use a production WSGI server like Gunicorn: gunicorn -w 4 -b 0.0.0.0:5000 app:app
Implement proper file management (delete audio files after a certain time)
Add error handling and logging
Implement rate limiting and other security measures

This agent provides an entertaining experience by generating unique, personalized short stories based on user prompts and then converting those stories into speech. Users can input any scenario or idea, and the AI will create a tale and narrate it for them.
Would you like me to explain any part of this code in more detail or suggest any enhancements?